{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from \"react\";\nimport fetchJsonp from \"fetch-jsonp\";\n\nrequire(\"es6-promise\").polyfill();\n\nvar Meetups = function (_React$Component) {\n  _inherits(Meetups, _React$Component);\n\n  function Meetups() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Meetups);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {\n      results: null\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Meetups.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var _props = this.props,\n        apiKey = _props.apiKey,\n        meetupsIds = _props.meetupsIds;\n    var url = \"https://api.meetup.com/2/events?group_id=\" + meetupsIds.join(\",\") + \"&status=upcoming&order=time&limited_events=False&desc=false&offset=0&format=json&page=50&fields=&sign=true&key=\" + apiKey;\n    var response = fetchJsonp(url).then(function (r) {\n      return r.json();\n    }).then(function (response) {\n      _this2.setState({\n        results: response.results\n      });\n    });\n  };\n\n  Meetups.prototype.render = function render() {\n    var _props2 = this.props,\n        render = _props2.render,\n        loading = _props2.loading;\n\n    if (this.state.results) {\n      return React.createElement(\"div\", null, render(this.state.results));\n    } else {\n      return React.createElement(\"div\", null, loading());\n    }\n  };\n\n  return Meetups;\n}(React.Component);\n\nexport { Meetups as default };","map":null,"metadata":{},"sourceType":"module"}